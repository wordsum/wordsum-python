{
  "file": "/gitbox/Word/Prostitute/Product/Goods/Tools/wordsum/build/resources/test/WordSumRindGetsTestingCNN.txt",
  "version": "0.0.5",
  "gitSha": "30edb575085b45266571fd12f3b14e086963ece2",
  "localDateTime": "2017-09-02T13:38:29.661",
  "copyright": "",
  "writers": [
    "Kalab J. Oster"
  ],
  "editors": [
    "Kalab J. Oster"
  ],
  "publishers": [
    "Word ProstituteÂ®"
  ],
  "fileState": ",,Rind GETS quiet.\u0027\n\n,,Magic Missile destroy. Rind want heal.\u0027\u0027\n\n\u0027\u0027What if good and they know we open?\u0027\u0027\n\n,,Like Rind. But Oterces fly.\u0027\u0027\n\n,,Rind is Kolosh. Cloak is Lord Oterces.\u0027\u0027\n\n,,Why tell Rind now?\u0027\u0027\n\n,,We not talk about why stole?\u0027\u0027\n\n\u0027\u0027Read. Fey Feeling of Mom Hugs seal.\u0027\u0027\n\n,,Morning dew shine dawn.\u0027\u0027\n\n \u0027\u0027Wall two taller Featherton wall. It look strong.\u0027\u0027\n\n ,,We go Kelten earn by hand.\u0027\u0027\n\n \u0027\u0027Wear cloak like you.\u0027\u0027\n\n ,,Want to play?\u0027\u0027\n\n ,,Hurts when Rind shivers.\u0027\u0027\n\n ,,Rind feel good. Rind gets with hand. Rind gets hood!\u0027\u0027\n\n ,,Rind is sixteen winters. And cut.\u0027\u0027\n\n ,,Rind tell story.\u0027\u0027\n\n \u0027\u0027Tom shot shoulder. Joe miss head. Tom try cut Rind face.\u0027\u0027\n\n ,,Warn. ...No. No warn.\u0027\u0027\n\n ,,They ambush Rind and Brom. Brom magic whistle. Whistle sleep people. Shop owners, girls. The bandits. Brom whistle and they sleep.\u0027\u0027\n\n ,,Rind didn\u0027t steal. Rind. Rind. Rind is no-\u0027\u0027\n\n ,,We come back and perform play here?\u0027\u0027\n\n ,,Lord Oterces violent. Rind not violent. Rind like laugh and run and fix things.\u0027\u0027\n\n ,,Brom, we go now. This is Lalious.\u0027\u0027\n\n ,,The elf told them Brom was magic caster.\u0027\u0027\n\n ,,Rind don\u0027t trust elf. Shot Brom. Brom dead didn\u0027t save Rind. Killed Brom...\u0027\u0027\n\n ,,Rind cut. Rind hooded.\u0027\u0027\n\n,,Mom cut, hooded, Rind...me.\u0027\u0027",
  "wordCount": 195,
  "paragraphStates": [
    {
      "paragraph": ",,Rind GETS quiet.\u0027",
      "wordCount": 3,
      "order": 1,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": false,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": ",,Rind GETS quiet.\u0027",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind GETS quiet.\u0027",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "GETS",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "quiet",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              },
              {
                "pos": "\u0027\u0027",
                "text": "\u0027",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, GETS-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "GETS"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(GETS-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "GETS"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "xcomp(GETS-2, quiet-3)",
                  "name": "xclausal complement",
                  "tag": "xcomp"
                },
                "dep": {
                  "index": "3",
                  "lemma": "quiet",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "quiet"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "GETS"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(GETS-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "GETS"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(GETS-2, \u0027-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": "\u0027",
                  "ner": "O",
                  "tag": "\u0027\u0027",
                  "word": "\u0027"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "GETS"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_3_node": {
                  "\u0027\u0027": "\u0027"
                },
                "s_node_1_node_1_node": {
                  "JJ": "quiet"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "GETS"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "quiet.\u0027"
                ]
              }
            },
            "sentence": ",,Rind GETS quiet.\u0027"
          },
          "jazzyState": {
            "text": ",,Rind GETS quiet.\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind GETS quiet.\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Magic Missile destroy. Rind want heal.\u0027\u0027",
      "wordCount": 6,
      "order": 2,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Magic Missile destroy.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Magic Missile destroy.",
            "coreAnnotations": [
              {
                "pos": "JJ",
                "text": "Magic",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Missile",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "destroy",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, destroy-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "destroy",
                  "ner": "O",
                  "tag": "VB",
                  "word": "destroy"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(Missile-2, Magic-1)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "1",
                  "lemma": "magic",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "Magic"
                },
                "gov": {
                  "index": "2",
                  "lemma": "Missile",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Missile"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(destroy-3, Missile-2)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Missile",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Missile"
                },
                "gov": {
                  "index": "3",
                  "lemma": "destroy",
                  "ner": "O",
                  "tag": "VB",
                  "word": "destroy"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(destroy-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "destroy",
                  "ner": "O",
                  "tag": "VB",
                  "word": "destroy"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "VBP": "destroy"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "NNP": "Missile"
                },
                "s_node_0_node_0_node": {
                  "NNP": "Magic"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "destroy."
                ]
              }
            },
            "sentence": ",,Magic Missile destroy."
          },
          "jazzyState": {
            "text": ",,Magic Missile destroy.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Magic Missile destroy.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind want heal.\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind want heal.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "want",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "heal",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, want-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "want"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(want-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "want"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "xcomp(want-2, heal-3)",
                  "name": "xclausal complement",
                  "tag": "xcomp"
                },
                "dep": {
                  "index": "3",
                  "lemma": "heal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "heal"
                },
                "gov": {
                  "index": "2",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "want"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(want-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "want"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "VB": "heal"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBP": "want"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "heal.\u0027\u0027"
                ]
              }
            },
            "sentence": "Rind want heal.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Rind want heal.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Rind want heal.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": "\u0027\u0027What if good and they know we open?\u0027\u0027",
      "wordCount": 8,
      "order": 3,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "\u0027\u0027What if good and they know we open?\u0027\u0027",
          "wordCount": 8,
          "orderParagraph": 1,
          "tense": [
            "Present",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "What if good and they know we open?",
            "coreAnnotations": [
              {
                "pos": "WP",
                "text": "What",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "if",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "good",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "they",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "know",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "we",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "open",
                "net": "O"
              },
              {
                "pos": ".",
                "text": "?",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, know-6)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(good-3, and-4)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "4",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "3",
                  "lemma": "good",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "good"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(good-3, they-5)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "5",
                  "lemma": "they",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "they"
                },
                "gov": {
                  "index": "3",
                  "lemma": "good",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "good"
                }
              },
              {
                "reln": {
                  "string": "dep(know-6, What-1)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "1",
                  "lemma": "what",
                  "ner": "O",
                  "tag": "WP",
                  "word": "What"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "mark(know-6, if-2)",
                  "name": "marker",
                  "tag": "mark"
                },
                "dep": {
                  "index": "2",
                  "lemma": "if",
                  "ner": "O",
                  "tag": "IN",
                  "word": "if"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(know-6, good-3)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "good",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "good"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(know-6, they-5)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "5",
                  "lemma": "they",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "they"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "ccomp(know-6, open-8)",
                  "name": "clausal complement",
                  "tag": "ccomp"
                },
                "dep": {
                  "index": "8",
                  "lemma": "open",
                  "ner": "O",
                  "tag": "VB",
                  "word": "open"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(know-6, ?-9)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "9",
                  "lemma": "?",
                  "ner": "O",
                  "tag": ".",
                  "word": "?"
                },
                "gov": {
                  "index": "6",
                  "lemma": "know",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "know"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(open-8, we-7)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "7",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "we"
                },
                "gov": {
                  "index": "8",
                  "lemma": "open",
                  "ner": "O",
                  "tag": "VB",
                  "word": "open"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "WHNP"
                },
                "s_node_1_node_1_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node_1_node_1_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_2_node": {
                  "PERIOD": "?"
                },
                "s_node_1_node_1_node_1_node_1_node_0_node": {
                  "PRP": "we"
                },
                "s_node_1_node_1_node_0_node_2_node": {
                  "PRP": "they"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "S"
                },
                "s_node_1_node_1_node_0_node_2_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "SBAR"
                },
                "s_node_1_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_node_0_node": {
                  "VBP": "know"
                },
                "s_node_1_node_1_node_0_node_0_node": {
                  "JJ": "good"
                },
                "s_node_1_node_1_node_0_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node_1_node_1_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node": {
                  "WDT": "What"
                },
                "s_node_1_node_0_node": {
                  "IN": "if"
                },
                "s_node_1_node_1_node_1_node_1_leaf": {
                  "phrase": "S"
                },
                "s_node_1_node_1_node_1_node_1_node_1_node": {
                  "JJ": "open"
                },
                "s_node_1_node_1_node_0_node_1_node": {
                  "CC": "and"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "\u0027\u0027What if good and they know we open?\u0027\u0027"
          },
          "jazzyState": {
            "text": "\u0027\u0027What if good and they know we open?\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "\u0027\u0027What if good and they know we open?\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": true
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Like Rind. But Oterces fly.\u0027\u0027",
      "wordCount": 5,
      "order": 4,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Like Rind.",
          "wordCount": 2,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Like Rind.",
            "coreAnnotations": [
              {
                "pos": "IN",
                "text": "Like",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Rind-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(Rind-2, Like-1)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "1",
                  "lemma": "like",
                  "ner": "O",
                  "tag": "IN",
                  "word": "Like"
                },
                "gov": {
                  "index": "2",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Rind-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "PP"
                },
                "s_node_0_node_1_node": {
                  "NNP": "Rind"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node": {
                  "IN": "Like"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Rind."
                ]
              }
            },
            "sentence": ",,Like Rind."
          },
          "jazzyState": {
            "text": ",,Like Rind.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Like Rind.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "But Oterces fly.\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "But Oterces fly.",
            "coreAnnotations": [
              {
                "pos": "CC",
                "text": "But",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Oterces",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "fly",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, fly-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "fly",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "fly"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(fly-3, But-1)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "1",
                  "lemma": "but",
                  "ner": "O",
                  "tag": "CC",
                  "word": "But"
                },
                "gov": {
                  "index": "3",
                  "lemma": "fly",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "fly"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(fly-3, Oterces-2)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                },
                "gov": {
                  "index": "3",
                  "lemma": "fly",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "fly"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(fly-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "fly",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "fly"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "NNP": "Oterces"
                },
                "s_node_3_node": {
                  "PERIOD": "."
                },
                "s_node_2_node": {
                  "VBP": "fly"
                },
                "s_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "CC": "But"
                },
                "s_node_1_leaf": {
                  "phrase": "NP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "fly.\u0027\u0027"
                ]
              }
            },
            "sentence": "But Oterces fly.\u0027\u0027"
          },
          "jazzyState": {
            "text": "But Oterces fly.\u0027\u0027",
            "misspelledWords": {
              "Oterces": [
                "waitresses"
              ]
            }
          },
          "dialogState": {
            "sentence": "But Oterces fly.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind is Kolosh. Cloak is Lord Oterces.\u0027\u0027",
      "wordCount": 7,
      "order": 5,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Rind is Kolosh.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind is Kolosh.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "is",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Kolosh",
                "net": "PERSON"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Kolosh-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Kolosh",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Kolosh"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(Kolosh-3, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Kolosh",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Kolosh"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(Kolosh-3, is-2)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "2",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "is"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Kolosh",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Kolosh"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Kolosh-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "Kolosh",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Kolosh"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NNP": "Kolosh"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "is"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Kolosh."
                ]
              }
            },
            "sentence": ",,Rind is Kolosh."
          },
          "jazzyState": {
            "text": ",,Rind is Kolosh.",
            "misspelledWords": {
              "Kolosh": [
                "clash"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,Rind is Kolosh.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Cloak is Lord Oterces.\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Cloak is Lord Oterces.",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "Cloak",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "is",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Lord",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Oterces",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Oterces-4)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "4",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(Oterces-4, Cloak-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "cloak",
                  "ner": "O",
                  "tag": "NN",
                  "word": "Cloak"
                },
                "gov": {
                  "index": "4",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(Oterces-4, is-2)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "2",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "is"
                },
                "gov": {
                  "index": "4",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(Oterces-4, Lord-3)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Lord",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lord"
                },
                "gov": {
                  "index": "4",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Oterces-4, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "4",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_1_node_1_node": {
                  "NNP": "Oterces"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Cloak"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "is"
                },
                "s_node_1_node_1_node_0_node": {
                  "NNP": "Lord"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "Oterces.\u0027\u0027"
                ]
              }
            },
            "sentence": "Cloak is Lord Oterces.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Cloak is Lord Oterces.\u0027\u0027",
            "misspelledWords": {
              "Oterces": [
                "waitresses"
              ]
            }
          },
          "dialogState": {
            "sentence": "Cloak is Lord Oterces.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Why tell Rind now?\u0027\u0027",
      "wordCount": 4,
      "order": 6,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Why tell Rind now?\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Why tell Rind now?",
            "coreAnnotations": [
              {
                "pos": "WRB",
                "text": "Why",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "tell",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "now",
                "net": "DATE"
              },
              {
                "pos": ".",
                "text": "?",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, tell-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "tell"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(tell-2, Why-1)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "1",
                  "lemma": "why",
                  "ner": "O",
                  "tag": "WRB",
                  "word": "Why"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "tell"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(tell-2, Rind-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "tell"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(tell-2, now-4)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "4",
                  "lemma": "now",
                  "ner": "DATE",
                  "tag": "RB",
                  "word": "now"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "tell"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(tell-2, ?-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": "?",
                  "ner": "O",
                  "tag": ".",
                  "word": "?"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "tell"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node": {
                  "RB": "now"
                },
                "s_node_0_leaf": {
                  "phrase": "WHADVP"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "ADVP"
                },
                "s_node_1_node_1_node": {
                  "NNP": "Rind"
                },
                "s_node_2_node": {
                  "PERIOD": "?"
                },
                "s_node_0_node": {
                  "WRB": "Why"
                },
                "s_node_1_node_0_node": {
                  "VBP": "tell"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": ",,Why tell Rind now?\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Why tell Rind now?\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Why tell Rind now?\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,We not talk about why stole?\u0027\u0027",
      "wordCount": 6,
      "order": 7,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,We not talk about why stole?\u0027\u0027",
          "wordCount": 6,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple",
            "PastParticiple"
          ],
          "nlpState": {
            "sentence": "We not talk about why stole?",
            "coreAnnotations": [
              {
                "pos": "PRP",
                "text": "We",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "not",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "talk",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "about",
                "net": "O"
              },
              {
                "pos": "WRB",
                "text": "why",
                "net": "O"
              },
              {
                "pos": "VBN",
                "text": "stole",
                "net": "O"
              },
              {
                "pos": ".",
                "text": "?",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, talk-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "talk",
                  "ner": "O",
                  "tag": "VB",
                  "word": "talk"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(talk-3, We-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "We"
                },
                "gov": {
                  "index": "3",
                  "lemma": "talk",
                  "ner": "O",
                  "tag": "VB",
                  "word": "talk"
                }
              },
              {
                "reln": {
                  "parent": "advmod",
                  "string": "neg(talk-3, not-2)",
                  "name": "negation modifier",
                  "tag": "neg"
                },
                "dep": {
                  "index": "2",
                  "lemma": "not",
                  "ner": "O",
                  "tag": "RB",
                  "word": "not"
                },
                "gov": {
                  "index": "3",
                  "lemma": "talk",
                  "ner": "O",
                  "tag": "VB",
                  "word": "talk"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advcl(talk-3, stole-6)",
                  "name": "adverbial clause modifier",
                  "tag": "advcl"
                },
                "dep": {
                  "index": "6",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "stole"
                },
                "gov": {
                  "index": "3",
                  "lemma": "talk",
                  "ner": "O",
                  "tag": "VB",
                  "word": "talk"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(talk-3, ?-7)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "7",
                  "lemma": "?",
                  "ner": "O",
                  "tag": ".",
                  "word": "?"
                },
                "gov": {
                  "index": "3",
                  "lemma": "talk",
                  "ner": "O",
                  "tag": "VB",
                  "word": "talk"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "mark(stole-6, about-4)",
                  "name": "marker",
                  "tag": "mark"
                },
                "dep": {
                  "index": "4",
                  "lemma": "about",
                  "ner": "O",
                  "tag": "IN",
                  "word": "about"
                },
                "gov": {
                  "index": "6",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "stole"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(stole-6, why-5)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "5",
                  "lemma": "why",
                  "ner": "O",
                  "tag": "WRB",
                  "word": "why"
                },
                "gov": {
                  "index": "6",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "stole"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_2_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_2_node_1_node_0_node": {
                  "IN": "about"
                },
                "s_node_2_node_1_node_1_node_0_node": {
                  "WRB": "why"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_3_node": {
                  "PERIOD": "?"
                },
                "s_node_2_node_0_node": {
                  "VBP": "talk"
                },
                "s_node_2_node_1_node_1_leaf": {
                  "phrase": "SBAR"
                },
                "s_node_2_node_1_node_1_node_1_node": {
                  "VBD": "stole"
                },
                "s_node_2_node_1_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node": {
                  "RB": "not"
                },
                "s_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "PRP": "We"
                },
                "s_node_2_node_1_node_1_node_0_leaf": {
                  "phrase": "WHADVP"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": ",,We not talk about why stole?\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,We not talk about why stole?\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,We not talk about why stole?\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": "\u0027\u0027Read. Fey Feeling of Mom Hugs seal.\u0027\u0027",
      "wordCount": 7,
      "order": 8,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "\u0027\u0027Read.",
          "wordCount": 1,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Read.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Read",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Read-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Read",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Read"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Read-1, .-2)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "2",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Read",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Read"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "VB": "Read"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "\u0027\u0027Read."
                ]
              }
            },
            "sentence": "\u0027\u0027Read."
          },
          "jazzyState": {
            "text": "\u0027\u0027Read.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "\u0027\u0027Read.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": true
          },
          "completeSentence": false
        },
        {
          "sentence": "Fey Feeling of Mom Hugs seal.\u0027\u0027",
          "wordCount": 6,
          "orderParagraph": 2,
          "tense": [
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Fey Feeling of Mom Hugs seal.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Fey",
                "net": "O"
              },
              {
                "pos": "VBG",
                "text": "Feeling",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "of",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "Mom",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "Hugs",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "seal",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Fey-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Fey",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Fey"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "acl(Fey-1, Feeling-2)",
                  "name": "clausal modifier of noun",
                  "tag": "acl"
                },
                "dep": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VBG",
                  "word": "Feeling"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Fey",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Fey"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Fey-1, .-7)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "7",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Fey",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Fey"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:of(Feeling-2, seal-6)",
                  "name": "nmod_preposition",
                  "tag": "nmod:of"
                },
                "dep": {
                  "index": "6",
                  "lemma": "seal",
                  "ner": "O",
                  "tag": "NN",
                  "word": "seal"
                },
                "gov": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VBG",
                  "word": "Feeling"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(seal-6, of-3)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "3",
                  "lemma": "of",
                  "ner": "O",
                  "tag": "IN",
                  "word": "of"
                },
                "gov": {
                  "index": "6",
                  "lemma": "seal",
                  "ner": "O",
                  "tag": "NN",
                  "word": "seal"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(seal-6, Mom-4)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "4",
                  "lemma": "mom",
                  "ner": "O",
                  "tag": "NN",
                  "word": "Mom"
                },
                "gov": {
                  "index": "6",
                  "lemma": "seal",
                  "ner": "O",
                  "tag": "NN",
                  "word": "seal"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(seal-6, Hugs-5)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "5",
                  "lemma": "hug",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "Hugs"
                },
                "gov": {
                  "index": "6",
                  "lemma": "seal",
                  "ner": "O",
                  "tag": "NN",
                  "word": "seal"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "seal"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node_1_node": {
                  "NNP": "Feeling"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_1_node": {
                  "NN": "Mom"
                },
                "s_node_0_node_0_node_0_node": {
                  "NNP": "Fey"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "Hugs"
                },
                "s_node_0_node_1_node_0_node": {
                  "IN": "of"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "seal.\u0027\u0027"
                ]
              }
            },
            "sentence": "Fey Feeling of Mom Hugs seal.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Fey Feeling of Mom Hugs seal.\u0027\u0027",
            "misspelledWords": {
              "Fey": [
                "fee",
                "few",
                "key",
                "hey",
                "fed",
                "fry",
                "fen",
                "fly"
              ]
            }
          },
          "dialogState": {
            "sentence": "Fey Feeling of Mom Hugs seal.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Morning dew shine dawn.\u0027\u0027",
      "wordCount": 4,
      "order": 9,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Morning dew shine dawn.\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Morning dew shine dawn.",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "Morning",
                "net": "TIME"
              },
              {
                "pos": "NN",
                "text": "dew",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "shine",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "dawn",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, shine-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "shine",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "shine"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(dew-2, Morning-1)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "1",
                  "lemma": "morning",
                  "ner": "TIME",
                  "tag": "NN",
                  "word": "Morning"
                },
                "gov": {
                  "index": "2",
                  "lemma": "dew",
                  "ner": "O",
                  "tag": "NN",
                  "word": "dew"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(shine-3, dew-2)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "dew",
                  "ner": "O",
                  "tag": "NN",
                  "word": "dew"
                },
                "gov": {
                  "index": "3",
                  "lemma": "shine",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "shine"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(shine-3, dawn-4)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "4",
                  "lemma": "dawn",
                  "ner": "O",
                  "tag": "NN",
                  "word": "dawn"
                },
                "gov": {
                  "index": "3",
                  "lemma": "shine",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "shine"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(shine-3, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "shine",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "shine"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "dawn"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "NN": "dew"
                },
                "s_node_1_node_0_node": {
                  "VBP": "shine"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node": {
                  "NN": "Morning"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "dawn.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,Morning dew shine dawn.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Morning dew shine dawn.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Morning dew shine dawn.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": "\u0027\u0027Wall two taller Featherton wall. It look strong.\u0027\u0027",
      "wordCount": 8,
      "order": 10,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "\u0027\u0027Wall two taller Featherton wall.",
          "wordCount": 5,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Wall two taller Featherton wall.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Wall",
                "net": "O"
              },
              {
                "pos": "CD",
                "text": "two",
                "net": "NUMBER"
              },
              {
                "pos": "JJR",
                "text": "taller",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Featherton",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "wall",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Wall-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Wall",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Wall"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "nummod(Wall-1, two-2)",
                  "name": "numeric modifier",
                  "tag": "nummod"
                },
                "dep": {
                  "index": "2",
                  "lemma": "two",
                  "ner": "NUMBER",
                  "tag": "CD",
                  "word": "two"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Wall",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Wall"
                }
              },
              {
                "reln": {
                  "string": "dep(Wall-1, wall-5)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "5",
                  "lemma": "wall",
                  "ner": "O",
                  "tag": "NN",
                  "word": "wall"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Wall",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Wall"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Wall-1, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Wall",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Wall"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(wall-5, taller-3)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "3",
                  "lemma": "taller",
                  "ner": "O",
                  "tag": "JJR",
                  "word": "taller"
                },
                "gov": {
                  "index": "5",
                  "lemma": "wall",
                  "ner": "O",
                  "tag": "NN",
                  "word": "wall"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(wall-5, Featherton-4)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "4",
                  "lemma": "Featherton",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Featherton"
                },
                "gov": {
                  "index": "5",
                  "lemma": "wall",
                  "ner": "O",
                  "tag": "NN",
                  "word": "wall"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node": {
                  "NN": "wall"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "JJ": "Featherton"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "CD": "two"
                },
                "s_node_1_node_0_node": {
                  "JJR": "taller"
                },
                "s_node_0_node_0_node": {
                  "NNP": "Wall"
                },
                "s_node_1_leaf": {
                  "phrase": "NP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "wall."
                ]
              }
            },
            "sentence": "\u0027\u0027Wall two taller Featherton wall."
          },
          "jazzyState": {
            "text": "\u0027\u0027Wall two taller Featherton wall.",
            "misspelledWords": {
              "Featherton": []
            }
          },
          "dialogState": {
            "sentence": "\u0027\u0027Wall two taller Featherton wall.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": true
          },
          "completeSentence": false
        },
        {
          "sentence": "It look strong.\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "It look strong.",
            "coreAnnotations": [
              {
                "pos": "PRP",
                "text": "It",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "look",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "strong",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, look-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "look",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "look"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(look-2, It-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "it",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "It"
                },
                "gov": {
                  "index": "2",
                  "lemma": "look",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "look"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "xcomp(look-2, strong-3)",
                  "name": "xclausal complement",
                  "tag": "xcomp"
                },
                "dep": {
                  "index": "3",
                  "lemma": "strong",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "strong"
                },
                "gov": {
                  "index": "2",
                  "lemma": "look",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "look"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(look-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "look",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "look"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "JJ": "strong"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "PRP": "It"
                },
                "s_node_1_node_0_node": {
                  "VBP": "look"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "strong.\u0027\u0027"
                ]
              }
            },
            "sentence": "It look strong.\u0027\u0027"
          },
          "jazzyState": {
            "text": "It look strong.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "It look strong.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,We go Kelten earn by hand.\u0027\u0027",
      "wordCount": 6,
      "order": 11,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,We go Kelten earn by hand.\u0027\u0027",
          "wordCount": 6,
          "orderParagraph": 1,
          "tense": [
            "Present",
            "Present"
          ],
          "nlpState": {
            "sentence": "We go Kelten earn by hand.",
            "coreAnnotations": [
              {
                "pos": "PRP",
                "text": "We",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "go",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Kelten",
                "net": "PERSON"
              },
              {
                "pos": "VBP",
                "text": "earn",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "by",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "hand",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, go-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(go-2, We-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "We"
                },
                "gov": {
                  "index": "2",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "ccomp(go-2, earn-4)",
                  "name": "clausal complement",
                  "tag": "ccomp"
                },
                "dep": {
                  "index": "4",
                  "lemma": "earn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "earn"
                },
                "gov": {
                  "index": "2",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(go-2, .-7)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "7",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(earn-4, Kelten-3)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Kelten",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Kelten"
                },
                "gov": {
                  "index": "4",
                  "lemma": "earn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "earn"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:by(earn-4, hand-6)",
                  "name": "nmod_preposition",
                  "tag": "nmod:by"
                },
                "dep": {
                  "index": "6",
                  "lemma": "hand",
                  "ner": "O",
                  "tag": "NN",
                  "word": "hand"
                },
                "gov": {
                  "index": "4",
                  "lemma": "earn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "earn"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(hand-6, by-5)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "5",
                  "lemma": "by",
                  "ner": "O",
                  "tag": "IN",
                  "word": "by"
                },
                "gov": {
                  "index": "6",
                  "lemma": "hand",
                  "ner": "O",
                  "tag": "NN",
                  "word": "hand"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node_1_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_1_node_1_node_1_node_1_node_0_node": {
                  "IN": "by"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "S"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_node_0_node": {
                  "VBP": "earn"
                },
                "s_node_0_node": {
                  "PRP": "We"
                },
                "s_node_1_node_0_node": {
                  "VBP": "go"
                },
                "s_node_1_node_1_node_0_node": {
                  "NNP": "Kelten"
                },
                "s_node_1_node_1_node_1_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_1_node_1_node_1_node_1_node_1_node": {
                  "NN": "hand"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "hand.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,We go Kelten earn by hand.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,We go Kelten earn by hand.\u0027\u0027",
            "misspelledWords": {
              "Kelten": [
                "gelatin"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,We go Kelten earn by hand.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": "\u0027\u0027Wear cloak like you.\u0027\u0027",
      "wordCount": 4,
      "order": 12,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "\u0027\u0027Wear cloak like you.\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Wear cloak like you.",
            "coreAnnotations": [
              {
                "pos": "VB",
                "text": "Wear",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "cloak",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "like",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "you",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Wear-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "wear",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Wear"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(Wear-1, cloak-2)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "cloak",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cloak"
                },
                "gov": {
                  "index": "1",
                  "lemma": "wear",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Wear"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:like(Wear-1, you-4)",
                  "name": "nmod_preposition",
                  "tag": "nmod:like"
                },
                "dep": {
                  "index": "4",
                  "lemma": "you",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "you"
                },
                "gov": {
                  "index": "1",
                  "lemma": "wear",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Wear"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Wear-1, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "wear",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Wear"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(you-4, like-3)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "3",
                  "lemma": "like",
                  "ner": "O",
                  "tag": "IN",
                  "word": "like"
                },
                "gov": {
                  "index": "4",
                  "lemma": "you",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "you"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_1_node_1_node": {
                  "PRP": "you"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Wear"
                },
                "s_node_1_node_0_node": {
                  "VBP": "cloak"
                },
                "s_node_1_node_1_node_0_node": {
                  "IN": "like"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_leaf": {
                  "phrase": "NP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "you.\u0027\u0027"
                ]
              }
            },
            "sentence": "\u0027\u0027Wear cloak like you.\u0027\u0027"
          },
          "jazzyState": {
            "text": "\u0027\u0027Wear cloak like you.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "\u0027\u0027Wear cloak like you.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": true
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Want to play?\u0027\u0027",
      "wordCount": 3,
      "order": 13,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Want to play?\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Want to play?",
            "coreAnnotations": [
              {
                "pos": "VB",
                "text": "Want",
                "net": "O"
              },
              {
                "pos": "TO",
                "text": "to",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "play",
                "net": "O"
              },
              {
                "pos": ".",
                "text": "?",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Want-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Want"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "xcomp(Want-1, play-3)",
                  "name": "xclausal complement",
                  "tag": "xcomp"
                },
                "dep": {
                  "index": "3",
                  "lemma": "play",
                  "ner": "O",
                  "tag": "VB",
                  "word": "play"
                },
                "gov": {
                  "index": "1",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Want"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Want-1, ?-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": "?",
                  "ner": "O",
                  "tag": ".",
                  "word": "?"
                },
                "gov": {
                  "index": "1",
                  "lemma": "want",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Want"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "mark(play-3, to-2)",
                  "name": "marker",
                  "tag": "mark"
                },
                "dep": {
                  "index": "2",
                  "lemma": "to",
                  "ner": "O",
                  "tag": "TO",
                  "word": "to"
                },
                "gov": {
                  "index": "3",
                  "lemma": "play",
                  "ner": "O",
                  "tag": "VB",
                  "word": "play"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "?"
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_1_node": {
                  "VB": "play"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_0_node": {
                  "VB": "Want"
                },
                "s_node_0_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_0_node": {
                  "TO": "to"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": ",,Want to play?\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Want to play?\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Want to play?\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Hurts when Rind shivers.\u0027\u0027",
      "wordCount": 4,
      "order": 14,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Hurts when Rind shivers.\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Hurts when Rind shivers.",
            "coreAnnotations": [
              {
                "pos": "VBZ",
                "text": "Hurts",
                "net": "O"
              },
              {
                "pos": "WRB",
                "text": "when",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "shivers",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Hurts-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "hurt",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "Hurts"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(Hurts-1, when-2)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "when",
                  "ner": "O",
                  "tag": "WRB",
                  "word": "when"
                },
                "gov": {
                  "index": "1",
                  "lemma": "hurt",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "Hurts"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:tmod(Hurts-1, Rind-3)",
                  "name": "temporal modifier",
                  "tag": "nmod:tmod"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "1",
                  "lemma": "hurt",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "Hurts"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Hurts-1, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "hurt",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "Hurts"
                }
              },
              {
                "reln": {
                  "string": "dep(Rind-3, shivers-4)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "4",
                  "lemma": "shiver",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "shivers"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_node_1_node_1_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_0_leaf": {
                  "phrase": "WHADVP"
                },
                "s_node_0_node_1_node_1_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_1_node_1_node_1_node": {
                  "VBZ": "shivers"
                },
                "s_node_0_node_1_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "SBAR"
                },
                "s_node_0_node_0_node": {
                  "VBZ": "Hurts"
                },
                "s_node_0_node_1_node_1_leaf": {
                  "phrase": "S"
                },
                "s_node_0_node_1_node_0_node": {
                  "WRB": "when"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "shivers.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,Hurts when Rind shivers.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Hurts when Rind shivers.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Hurts when Rind shivers.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind feel good. Rind gets with hand. Rind gets hood!\u0027\u0027",
      "wordCount": 10,
      "order": 15,
      "sentenceCount": 3,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Rind feel good.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind feel good.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "feel",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "good",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, feel-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VB",
                  "word": "feel"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(feel-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VB",
                  "word": "feel"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "xcomp(feel-2, good-3)",
                  "name": "xclausal complement",
                  "tag": "xcomp"
                },
                "dep": {
                  "index": "3",
                  "lemma": "good",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "good"
                },
                "gov": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VB",
                  "word": "feel"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(feel-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "feel",
                  "ner": "O",
                  "tag": "VB",
                  "word": "feel"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "JJ": "good"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBP": "feel"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "good."
                ]
              }
            },
            "sentence": ",,Rind feel good."
          },
          "jazzyState": {
            "text": ",,Rind feel good.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind feel good.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind gets with hand.",
          "wordCount": 4,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind gets with hand.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "PERSON"
              },
              {
                "pos": "VBZ",
                "text": "gets",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "with",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "hand",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, gets-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(gets-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:with(gets-2, hand-4)",
                  "name": "nmod_preposition",
                  "tag": "nmod:with"
                },
                "dep": {
                  "index": "4",
                  "lemma": "hand",
                  "ner": "O",
                  "tag": "NN",
                  "word": "hand"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(gets-2, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(hand-4, with-3)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "3",
                  "lemma": "with",
                  "ner": "O",
                  "tag": "IN",
                  "word": "with"
                },
                "gov": {
                  "index": "4",
                  "lemma": "hand",
                  "ner": "O",
                  "tag": "NN",
                  "word": "hand"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_1_node_1_node": {
                  "NN": "hand"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "gets"
                },
                "s_node_1_node_1_node_0_node": {
                  "IN": "with"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_leaf": {
                  "phrase": "NP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "hand."
                ]
              }
            },
            "sentence": "Rind gets with hand."
          },
          "jazzyState": {
            "text": "Rind gets with hand.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind gets hood!\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 3,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind gets hood!",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "gets",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "hood",
                "net": "O"
              },
              {
                "pos": ".",
                "text": "!",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, gets-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(gets-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(gets-2, hood-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "hood",
                  "ner": "O",
                  "tag": "NN",
                  "word": "hood"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(gets-2, !-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": "!",
                  "ner": "O",
                  "tag": ".",
                  "word": "!"
                },
                "gov": {
                  "index": "2",
                  "lemma": "get",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "gets"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "hood"
                },
                "s_node_2_node": {
                  "PERIOD": "!"
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "gets"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "Rind gets hood!\u0027\u0027"
          },
          "jazzyState": {
            "text": "Rind gets hood!\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Rind gets hood!\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind is sixteen winters. And cut.\u0027\u0027",
      "wordCount": 6,
      "order": 16,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Rind is sixteen winters.",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind is sixteen winters.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "is",
                "net": "O"
              },
              {
                "pos": "CD",
                "text": "sixteen",
                "net": "NUMBER"
              },
              {
                "pos": "NNS",
                "text": "winters",
                "net": "SET"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, winters-4)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "4",
                  "lemma": "winter",
                  "ner": "SET",
                  "tag": "NNS",
                  "word": "winters"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(winters-4, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "4",
                  "lemma": "winter",
                  "ner": "SET",
                  "tag": "NNS",
                  "word": "winters"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(winters-4, is-2)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "2",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "is"
                },
                "gov": {
                  "index": "4",
                  "lemma": "winter",
                  "ner": "SET",
                  "tag": "NNS",
                  "word": "winters"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "nummod(winters-4, sixteen-3)",
                  "name": "numeric modifier",
                  "tag": "nummod"
                },
                "dep": {
                  "index": "3",
                  "lemma": "sixteen",
                  "ner": "NUMBER",
                  "tag": "CD",
                  "word": "sixteen"
                },
                "gov": {
                  "index": "4",
                  "lemma": "winter",
                  "ner": "SET",
                  "tag": "NNS",
                  "word": "winters"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(winters-4, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "4",
                  "lemma": "winter",
                  "ner": "SET",
                  "tag": "NNS",
                  "word": "winters"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_1_node_1_node": {
                  "NNS": "winters"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "is"
                },
                "s_node_1_node_1_node_0_node": {
                  "NN": "sixteen"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "winters."
                ]
              }
            },
            "sentence": ",,Rind is sixteen winters."
          },
          "jazzyState": {
            "text": ",,Rind is sixteen winters.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind is sixteen winters.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "And cut.\u0027\u0027",
          "wordCount": 2,
          "orderParagraph": 2,
          "tense": [],
          "nlpState": {
            "sentence": "And cut.",
            "coreAnnotations": [
              {
                "pos": "CC",
                "text": "And",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "cut",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, cut-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(cut-2, And-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "And"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "VB": "cut"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "CC": "And"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "cut.\u0027\u0027"
                ]
              }
            },
            "sentence": "And cut.\u0027\u0027"
          },
          "jazzyState": {
            "text": "And cut.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "And cut.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind tell story.\u0027\u0027",
      "wordCount": 3,
      "order": 17,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Rind tell story.\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind tell story.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "tell",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "story",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, tell-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VB",
                  "word": "tell"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(tell-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VB",
                  "word": "tell"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(tell-2, story-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "story",
                  "ner": "O",
                  "tag": "NN",
                  "word": "story"
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VB",
                  "word": "tell"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(tell-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VB",
                  "word": "tell"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "story"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBP": "tell"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "story.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,Rind tell story.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Rind tell story.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind tell story.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": "\u0027\u0027Tom shot shoulder. Joe miss head. Tom try cut Rind face.\u0027\u0027",
      "wordCount": 11,
      "order": 18,
      "sentenceCount": 3,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "\u0027\u0027Tom shot shoulder.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past"
          ],
          "nlpState": {
            "sentence": "Tom shot shoulder.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Tom",
                "net": "PERSON"
              },
              {
                "pos": "VBD",
                "text": "shot",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "shoulder",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, shot-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "shoot",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "shot"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(shot-2, Tom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Tom",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Tom"
                },
                "gov": {
                  "index": "2",
                  "lemma": "shoot",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "shot"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(shot-2, shoulder-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "shoulder",
                  "ner": "O",
                  "tag": "NN",
                  "word": "shoulder"
                },
                "gov": {
                  "index": "2",
                  "lemma": "shoot",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "shot"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(shot-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "shoot",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "shot"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "shoulder"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Tom"
                },
                "s_node_1_node_0_node": {
                  "VBD": "shot"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "shoulder."
                ]
              }
            },
            "sentence": "\u0027\u0027Tom shot shoulder."
          },
          "jazzyState": {
            "text": "\u0027\u0027Tom shot shoulder.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "\u0027\u0027Tom shot shoulder.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
              "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": true
          },
          "completeSentence": false
        },
        {
          "sentence": "Joe miss head.",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Joe miss head.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Joe",
                "net": "PERSON"
              },
              {
                "pos": "VBP",
                "text": "miss",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "head",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, miss-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "miss",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "miss"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(miss-2, Joe-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Joe",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Joe"
                },
                "gov": {
                  "index": "2",
                  "lemma": "miss",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "miss"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(miss-2, head-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "head",
                  "ner": "O",
                  "tag": "NN",
                  "word": "head"
                },
                "gov": {
                  "index": "2",
                  "lemma": "miss",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "miss"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(miss-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "miss",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "miss"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NN": "head"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Joe"
                },
                "s_node_1_node_0_node": {
                  "VBP": "miss"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "head."
                ]
              }
            },
            "sentence": "Joe miss head."
          },
          "jazzyState": {
            "text": "Joe miss head.",
            "misspelledWords": {
              "Joe": [
                "joy",
                "toe",
                "roe",
                "hoe",
                "foe",
                "woe",
                "joke",
                "jot",
                "job",
                "jog"
              ]
            }
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Tom try cut Rind face.\u0027\u0027",
          "wordCount": 5,
          "orderParagraph": 3,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple",
            "PastParticiple"
          ],
          "nlpState": {
            "sentence": "Tom try cut Rind face.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Tom",
                "net": "PERSON"
              },
              {
                "pos": "VB",
                "text": "try",
                "net": "O"
              },
              {
                "pos": "VBN",
                "text": "cut",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "face",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, try-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "try",
                  "ner": "O",
                  "tag": "VB",
                  "word": "try"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(try-2, Tom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Tom",
                  "ner": "PERSON",
                  "tag": "NNP",
                  "word": "Tom"
                },
                "gov": {
                  "index": "2",
                  "lemma": "try",
                  "ner": "O",
                  "tag": "VB",
                  "word": "try"
                }
              },
              {
                "reln": {
                  "string": "dep(try-2, cut-3)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "3",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "cut"
                },
                "gov": {
                  "index": "2",
                  "lemma": "try",
                  "ner": "O",
                  "tag": "VB",
                  "word": "try"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(try-2, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "try",
                  "ner": "O",
                  "tag": "VB",
                  "word": "try"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(cut-3, face-5)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "5",
                  "lemma": "face",
                  "ner": "O",
                  "tag": "NN",
                  "word": "face"
                },
                "gov": {
                  "index": "3",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(face-5, Rind-4)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "4",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "5",
                  "lemma": "face",
                  "ner": "O",
                  "tag": "NN",
                  "word": "face"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_1_node_1_node_1_node_1_node": {
                  "NN": "face"
                },
                "s_node_0_node": {
                  "NNP": "Tom"
                },
                "s_node_1_node_0_node": {
                  "VBP": "try"
                },
                "s_node_1_node_1_node_0_node": {
                  "VB": "cut"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node_1_node_0_node": {
                  "NNP": "Rind"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "face.\u0027\u0027"
                ]
              }
            },
            "sentence": "Tom try cut Rind face.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Tom try cut Rind face.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Tom try cut Rind face.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Warn. ...No. No warn.\u0027\u0027",
      "wordCount": 4,
      "order": 19,
      "sentenceCount": 3,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Warn.",
          "wordCount": 1,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Warn.",
            "coreAnnotations": [
              {
                "pos": "VB",
                "text": "Warn",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Warn-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "warn",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Warn"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Warn-1, .-2)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "2",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "warn",
                  "ner": "O",
                  "tag": "VB",
                  "word": "Warn"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "VBN": "Warn"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  ",,Warn."
                ]
              }
            },
            "sentence": ",,Warn."
          },
          "jazzyState": {
            "text": ",,Warn.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Warn.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "...No.",
          "wordCount": 1,
          "orderParagraph": 2,
          "tense": [],
          "nlpState": {
            "sentence": "...No.",
            "coreAnnotations": [
              {
                "pos": ":",
                "text": "...",
                "net": "O"
              },
              {
                "pos": "DT",
                "text": "No",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, No-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "No"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(No-2, ...-1)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "1",
                  "lemma": "...",
                  "ner": "O",
                  "tag": ":",
                  "word": "..."
                },
                "gov": {
                  "index": "2",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "No"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(No-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "No"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "NN": "No"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "COLON": "..."
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ELLIPSIS": [
                  "...No."
                ]
              }
            },
            "sentence": "...No."
          },
          "jazzyState": {
            "text": "...No.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "No warn.\u0027\u0027",
          "wordCount": 2,
          "orderParagraph": 3,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "No warn.",
            "coreAnnotations": [
              {
                "pos": "DT",
                "text": "No",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "warn",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, warn-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "warn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "warn"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(warn-2, No-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "No"
                },
                "gov": {
                  "index": "2",
                  "lemma": "warn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "warn"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(warn-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "warn",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "warn"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "VB": "warn"
                },
                "s_node_0_leaf": {
                  "phrase": "INTJ"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "UH": "No"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "warn.\u0027\u0027"
                ]
              }
            },
            "sentence": "No warn.\u0027\u0027"
          },
          "jazzyState": {
            "text": "No warn.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "No warn.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,They ambush Rind and Brom. Brom magic whistle. Whistle sleep people. Shop owners, girls. The bandits. Brom whistle and they sleep.\u0027\u0027",
      "wordCount": 21,
      "order": 20,
      "sentenceCount": 6,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,They ambush Rind and Brom.",
          "wordCount": 5,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "They ambush Rind and Brom.",
            "coreAnnotations": [
              {
                "pos": "PRP",
                "text": "They",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "ambush",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, ambush-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "ambush",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "ambush"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(ambush-2, They-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "they",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "They"
                },
                "gov": {
                  "index": "2",
                  "lemma": "ambush",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "ambush"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(ambush-2, Rind-3)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "ambush",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "ambush"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(ambush-2, Brom-5)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "5",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "2",
                  "lemma": "ambush",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "ambush"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(ambush-2, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "ambush",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "ambush"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(Rind-3, and-4)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "4",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(Rind-3, Brom-5)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "5",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_1_node_1_node": {
                  "CC": "and"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_1_node_1_node_2_node": {
                  "NNP": "Brom"
                },
                "s_node_0_node": {
                  "PRP": "They"
                },
                "s_node_1_node_0_node": {
                  "VBP": "ambush"
                },
                "s_node_1_node_1_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Brom."
                ]
              }
            },
            "sentence": ",,They ambush Rind and Brom."
          },
          "jazzyState": {
            "text": ",,They ambush Rind and Brom.",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,They ambush Rind and Brom.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Brom magic whistle.",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Brom magic whistle.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "magic",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "whistle",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, whistle-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(Brom-1, magic-2)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "2",
                  "lemma": "magic",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "magic"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(whistle-3, Brom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "3",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(whistle-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_1_node": {
                  "NN": "whistle"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node": {
                  "VB": "Brom"
                },
                "s_node_0_node_1_node_0_node": {
                  "JJ": "magic"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "whistle."
                ]
              }
            },
            "sentence": "Brom magic whistle."
          },
          "jazzyState": {
            "text": "Brom magic whistle.",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Whistle sleep people.",
          "wordCount": 3,
          "orderParagraph": 3,
          "tense": [],
          "nlpState": {
            "sentence": "Whistle sleep people.",
            "coreAnnotations": [
              {
                "pos": "JJ",
                "text": "Whistle",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "sleep",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "people",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, sleep-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "NN",
                  "word": "sleep"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(sleep-2, Whistle-1)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "1",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "Whistle"
                },
                "gov": {
                  "index": "2",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "NN",
                  "word": "sleep"
                }
              },
              {
                "reln": {
                  "string": "dep(sleep-2, people-3)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "3",
                  "lemma": "people",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "people"
                },
                "gov": {
                  "index": "2",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "NN",
                  "word": "sleep"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(sleep-2, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "NN",
                  "word": "sleep"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NNS": "people"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Whistle"
                },
                "s_node_1_node_0_node": {
                  "VBP": "sleep"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "people."
                ]
              }
            },
            "sentence": "Whistle sleep people."
          },
          "jazzyState": {
            "text": "Whistle sleep people.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Shop owners, girls.",
          "wordCount": 3,
          "orderParagraph": 4,
          "tense": [],
          "nlpState": {
            "sentence": "Shop owners, girls.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Shop",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "owners",
                "net": "O"
              },
              {
                "pos": ",",
                "text": ",",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "girls",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, owners-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "owner",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "owners"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(owners-2, Shop-1)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Shop",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Shop"
                },
                "gov": {
                  "index": "2",
                  "lemma": "owner",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "owners"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(owners-2, ,-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ",",
                  "ner": "O",
                  "tag": ",",
                  "word": ","
                },
                "gov": {
                  "index": "2",
                  "lemma": "owner",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "owners"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "appos(owners-2, girls-4)",
                  "name": "appositional modifier",
                  "tag": "appos"
                },
                "dep": {
                  "index": "4",
                  "lemma": "girl",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "girls"
                },
                "gov": {
                  "index": "2",
                  "lemma": "owner",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "owners"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(owners-2, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "owner",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "owners"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "COMMA": ","
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_3_node": {
                  "PERIOD": "."
                },
                "s_node_2_node": {
                  "NNS": "girls"
                },
                "s_node_0_node_1_node": {
                  "NNS": "owners"
                },
                "s_node_2_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node": {
                  "NNP": "Shop"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "girls."
                ]
              }
            },
            "sentence": "Shop owners, girls."
          },
          "jazzyState": {
            "text": "Shop owners, girls.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "The bandits.",
          "wordCount": 2,
          "orderParagraph": 5,
          "tense": [],
          "nlpState": {
            "sentence": "The bandits.",
            "coreAnnotations": [
              {
                "pos": "DT",
                "text": "The",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "bandits",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, bandits-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "bandit",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "bandits"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "det(bandits-2, The-1)",
                  "name": "determiner",
                  "tag": "det"
                },
                "dep": {
                  "index": "1",
                  "lemma": "the",
                  "ner": "O",
                  "tag": "DT",
                  "word": "The"
                },
                "gov": {
                  "index": "2",
                  "lemma": "bandit",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "bandits"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(bandits-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "bandit",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "bandits"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "NNS": "bandits"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "DT": "The"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "bandits."
                ]
              }
            },
            "sentence": "The bandits."
          },
          "jazzyState": {
            "text": "The bandits.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Brom whistle and they sleep.\u0027\u0027",
          "wordCount": 5,
          "orderParagraph": 6,
          "tense": [
            "Present",
            "Present"
          ],
          "nlpState": {
            "sentence": "Brom whistle and they sleep.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "whistle",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "they",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "sleep",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, whistle-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(whistle-2, Brom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "2",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(whistle-2, and-3)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "3",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "2",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(whistle-2, sleep-5)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "5",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "sleep"
                },
                "gov": {
                  "index": "2",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(whistle-2, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "whistle",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "whistle"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(sleep-5, they-4)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "4",
                  "lemma": "they",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "they"
                },
                "gov": {
                  "index": "5",
                  "lemma": "sleep",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "sleep"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_2_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node": {
                  "CC": "and"
                },
                "s_node_0_leaf": {
                  "phrase": "S"
                },
                "s_node_3_node": {
                  "PERIOD": "."
                },
                "s_node_2_node_1_node": {
                  "VBP": "sleep"
                },
                "s_node_0_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node_0_node": {
                  "PRP": "they"
                },
                "s_node_0_node_1_node": {
                  "VBP": "whistle"
                },
                "s_node_2_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_leaf": {
                  "phrase": "S"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_0_node": {
                  "NNP": "Brom"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "sleep.\u0027\u0027"
                ]
              }
            },
            "sentence": "Brom whistle and they sleep.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Brom whistle and they sleep.\u0027\u0027",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "sentence": "Brom whistle and they sleep.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind didn\u0027t steal. Rind. Rind. Rind is no-\u0027\u0027",
      "wordCount": 8,
      "order": 21,
      "sentenceCount": 4,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": false,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": ",,Rind didn\u0027t steal.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind didn\u0027t steal.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBD",
                "text": "did",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "n\u0027t",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "steal",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, steal-4)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "4",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "steal"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(steal-4, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "4",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "steal"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "aux(steal-4, did-2)",
                  "name": "auxiliary",
                  "tag": "aux"
                },
                "dep": {
                  "index": "2",
                  "lemma": "do",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "did"
                },
                "gov": {
                  "index": "4",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "steal"
                }
              },
              {
                "reln": {
                  "parent": "advmod",
                  "string": "neg(steal-4, n\u0027t-3)",
                  "name": "negation modifier",
                  "tag": "neg"
                },
                "dep": {
                  "index": "3",
                  "lemma": "not",
                  "ner": "O",
                  "tag": "RB",
                  "word": "n\u0027t"
                },
                "gov": {
                  "index": "4",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "steal"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(steal-4, .-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "4",
                  "lemma": "steal",
                  "ner": "O",
                  "tag": "VB",
                  "word": "steal"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node": {
                  "VB": "steal"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node": {
                  "RB": "n\u0027t"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBD": "did"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "steal."
                ]
              }
            },
            "sentence": ",,Rind didn\u0027t steal."
          },
          "jazzyState": {
            "text": ",,Rind didn\u0027t steal.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind didn\u0027t steal.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind.",
          "wordCount": 1,
          "orderParagraph": 2,
          "tense": [],
          "nlpState": {
            "sentence": "Rind.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Rind-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Rind-1, .-2)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "2",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "VBN": "Rind"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Rind."
                ]
              }
            },
            "sentence": "Rind."
          },
          "jazzyState": {
            "text": "Rind.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind.",
          "wordCount": 1,
          "orderParagraph": 3,
          "tense": [],
          "nlpState": {
            "sentence": "Rind.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Rind-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Rind-1, .-2)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "2",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node": {
                  "VBN": "Rind"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Rind."
                ]
              }
            },
            "sentence": "Rind."
          },
          "jazzyState": {
            "text": "Rind.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind is no-\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 4,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Rind is no-",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "is",
                "net": "O"
              },
              {
                "pos": "DT",
                "text": "no",
                "net": "O"
              },
              {
                "pos": ":",
                "text": "-",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, no-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "no"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(no-3, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "3",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "no"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(no-3, is-2)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "2",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "is"
                },
                "gov": {
                  "index": "3",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "no"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(no-3, --4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": "-",
                  "ner": "O",
                  "tag": ":",
                  "word": "-"
                },
                "gov": {
                  "index": "3",
                  "lemma": "no",
                  "ner": "O",
                  "tag": "DT",
                  "word": "no"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "RB": "no"
                },
                "s_node_2_node": {
                  "COLON": "-"
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "is"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "Rind is no-\u0027\u0027"
          },
          "jazzyState": {
            "text": "Rind is no-\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Rind is no-\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,We come back and perform play here?\u0027\u0027",
      "wordCount": 7,
      "order": 22,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,We come back and perform play here?\u0027\u0027",
          "wordCount": 7,
          "orderParagraph": 1,
          "tense": [
            "Present",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "We come back and perform play here?",
            "coreAnnotations": [
              {
                "pos": "PRP",
                "text": "We",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "come",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "back",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "perform",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "play",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "here",
                "net": "O"
              },
              {
                "pos": ".",
                "text": "?",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, come-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(come-2, We-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "We"
                },
                "gov": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(come-2, back-3)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "3",
                  "lemma": "back",
                  "ner": "O",
                  "tag": "RB",
                  "word": "back"
                },
                "gov": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(come-2, and-4)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "4",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(come-2, perform-5)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "5",
                  "lemma": "perform",
                  "ner": "O",
                  "tag": "VB",
                  "word": "perform"
                },
                "gov": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(come-2, ?-8)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "8",
                  "lemma": "?",
                  "ner": "O",
                  "tag": ".",
                  "word": "?"
                },
                "gov": {
                  "index": "2",
                  "lemma": "come",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "come"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(perform-5, We-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "We"
                },
                "gov": {
                  "index": "5",
                  "lemma": "perform",
                  "ner": "O",
                  "tag": "VB",
                  "word": "perform"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(perform-5, play-6)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "6",
                  "lemma": "play",
                  "ner": "O",
                  "tag": "NN",
                  "word": "play"
                },
                "gov": {
                  "index": "5",
                  "lemma": "perform",
                  "ner": "O",
                  "tag": "VB",
                  "word": "perform"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(perform-5, here-7)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "7",
                  "lemma": "here",
                  "ner": "O",
                  "tag": "RB",
                  "word": "here"
                },
                "gov": {
                  "index": "5",
                  "lemma": "perform",
                  "ner": "O",
                  "tag": "VB",
                  "word": "perform"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node_0_node": {
                  "VBP": "perform"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "CC": "and"
                },
                "s_node_2_node": {
                  "PERIOD": "?"
                },
                "s_node_1_node_2_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_2_node_1_node_0_node": {
                  "VB": "play"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_0_node_1_node": {
                  "RB": "back"
                },
                "s_node_1_node_0_node_1_leaf": {
                  "phrase": "ADVP"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_0_node_0_node": {
                  "VBP": "come"
                },
                "s_node_1_node_2_node_1_node_1_node": {
                  "RB": "here"
                },
                "s_node_0_node": {
                  "PRP": "We"
                },
                "s_node_1_node_2_node_1_node_1_leaf": {
                  "phrase": "ADVP"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": ",,We come back and perform play here?\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,We come back and perform play here?\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,We come back and perform play here?\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Lord Oterces violent. Rind not violent. Rind like laugh and run and fix things.\u0027\u0027",
      "wordCount": 14,
      "order": 23,
      "sentenceCount": 3,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Lord Oterces violent.",
          "wordCount": 3,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Lord Oterces violent.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Lord",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Oterces",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "violent",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, violent-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(Oterces-2, Lord-1)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Lord",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lord"
                },
                "gov": {
                  "index": "2",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                }
              },
              {
                "reln": {
                  "string": "dep(violent-3, Oterces-2)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Oterces",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Oterces"
                },
                "gov": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(violent-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "JJ": "violent"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Lord"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "Oterces"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "violent."
                ]
              }
            },
            "sentence": ",,Lord Oterces violent."
          },
          "jazzyState": {
            "text": ",,Lord Oterces violent.",
            "misspelledWords": {
              "Oterces": [
                "waitresses"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,Lord Oterces violent.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind not violent.",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [],
          "nlpState": {
            "sentence": "Rind not violent.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "not",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "violent",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, violent-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "string": "dep(violent-3, Rind-1)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                }
              },
              {
                "reln": {
                  "parent": "advmod",
                  "string": "neg(violent-3, not-2)",
                  "name": "negation modifier",
                  "tag": "neg"
                },
                "dep": {
                  "index": "2",
                  "lemma": "not",
                  "ner": "O",
                  "tag": "RB",
                  "word": "not"
                },
                "gov": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(violent-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "violent",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "violent"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node_1_node": {
                  "JJ": "violent"
                },
                "s_node_0_node_1_leaf": {
                  "phrase": "ADJP"
                },
                "s_node_0_node_0_node": {
                  "VB": "Rind"
                },
                "s_node_0_node_1_node_0_node": {
                  "RB": "not"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "violent."
                ]
              }
            },
            "sentence": "Rind not violent."
          },
          "jazzyState": {
            "text": "Rind not violent.",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind like laugh and run and fix things.\u0027\u0027",
          "wordCount": 8,
          "orderParagraph": 3,
          "tense": [
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind like laugh and run and fix things.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "IN",
                "text": "like",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "laugh",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "run",
                "net": "O"
              },
              {
                "pos": "CC",
                "text": "and",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "fix",
                "net": "O"
              },
              {
                "pos": "NNS",
                "text": "things",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Rind-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:like(Rind-1, laugh-3)",
                  "name": "nmod_preposition",
                  "tag": "nmod:like"
                },
                "dep": {
                  "index": "3",
                  "lemma": "laugh",
                  "ner": "O",
                  "tag": "NN",
                  "word": "laugh"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              },
              {
                "reln": {
                  "parent": "nmod",
                  "string": "nmod:like(Rind-1, run-5)",
                  "name": "nmod_preposition",
                  "tag": "nmod:like"
                },
                "dep": {
                  "index": "5",
                  "lemma": "run",
                  "ner": "O",
                  "tag": "VB",
                  "word": "run"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Rind-1, .-9)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "9",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(laugh-3, like-2)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "2",
                  "lemma": "like",
                  "ner": "O",
                  "tag": "IN",
                  "word": "like"
                },
                "gov": {
                  "index": "3",
                  "lemma": "laugh",
                  "ner": "O",
                  "tag": "NN",
                  "word": "laugh"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(laugh-3, and-4)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "4",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "3",
                  "lemma": "laugh",
                  "ner": "O",
                  "tag": "NN",
                  "word": "laugh"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(laugh-3, run-5)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "5",
                  "lemma": "run",
                  "ner": "O",
                  "tag": "VB",
                  "word": "run"
                },
                "gov": {
                  "index": "3",
                  "lemma": "laugh",
                  "ner": "O",
                  "tag": "NN",
                  "word": "laugh"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(laugh-3, fix-7)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "7",
                  "lemma": "fix",
                  "ner": "O",
                  "tag": "VB",
                  "word": "fix"
                },
                "gov": {
                  "index": "3",
                  "lemma": "laugh",
                  "ner": "O",
                  "tag": "NN",
                  "word": "laugh"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "cc(run-5, and-6)",
                  "name": "coordination",
                  "tag": "cc"
                },
                "dep": {
                  "index": "6",
                  "lemma": "and",
                  "ner": "O",
                  "tag": "CC",
                  "word": "and"
                },
                "gov": {
                  "index": "5",
                  "lemma": "run",
                  "ner": "O",
                  "tag": "VB",
                  "word": "run"
                }
              },
              {
                "reln": {
                  "parent": "conj",
                  "string": "conj:and(run-5, fix-7)",
                  "name": "conj_collapsed",
                  "tag": "conj:and"
                },
                "dep": {
                  "index": "7",
                  "lemma": "fix",
                  "ner": "O",
                  "tag": "VB",
                  "word": "fix"
                },
                "gov": {
                  "index": "5",
                  "lemma": "run",
                  "ner": "O",
                  "tag": "VB",
                  "word": "run"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(run-5, things-8)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "8",
                  "lemma": "thing",
                  "ner": "O",
                  "tag": "NNS",
                  "word": "things"
                },
                "gov": {
                  "index": "5",
                  "lemma": "run",
                  "ner": "O",
                  "tag": "VB",
                  "word": "run"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_node_2_node_3_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_0_node_1_node_0_node": {
                  "IN": "like"
                },
                "s_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_0_leaf": {
                  "phrase": "VP"
                },
                "s_node_0_node_1_node": {
                  "CC": "and"
                },
                "s_node_0_node_0_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_2_node_2_node": {
                  "VB": "fix"
                },
                "s_node_0_node_0_node_1_node_1_node": {
                  "NN": "laugh"
                },
                "s_node_0_node_0_node_1_leaf": {
                  "phrase": "PP"
                },
                "s_node_0_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_2_node_1_node": {
                  "CC": "and"
                },
                "s_node_0_node_0_node_0_node": {
                  "VB": "Rind"
                },
                "s_node_0_node_2_node_0_node": {
                  "VB": "run"
                },
                "s_node_0_node_2_node_3_node": {
                  "NNS": "things"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "things.\u0027\u0027"
                ]
              }
            },
            "sentence": "Rind like laugh and run and fix things.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Rind like laugh and run and fix things.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Rind like laugh and run and fix things.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Brom, we go now. This is Lalious.\u0027\u0027",
      "wordCount": 7,
      "order": 24,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": false,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": ",,Brom, we go now.",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "Brom, we go now.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": ",",
                "text": ",",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "we",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "go",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "now",
                "net": "DATE"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, go-4)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(go-4, Brom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(go-4, ,-2)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "2",
                  "lemma": ",",
                  "ner": "O",
                  "tag": ",",
                  "word": ","
                },
                "gov": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(go-4, we-3)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "3",
                  "lemma": "we",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "we"
                },
                "gov": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "advmod(go-4, now-5)",
                  "name": "adverbial modifier",
                  "tag": "advmod"
                },
                "dep": {
                  "index": "5",
                  "lemma": "now",
                  "ner": "DATE",
                  "tag": "RB",
                  "word": "now"
                },
                "gov": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(go-4, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "4",
                  "lemma": "go",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "go"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_3_leaf": {
                  "phrase": "VP"
                },
                "s_node_3_node_1_leaf": {
                  "phrase": "ADVP"
                },
                "s_node_1_node": {
                  "COMMA": ","
                },
                "s_node_0_leaf": {
                  "phrase": "ADVP"
                },
                "s_node_2_node": {
                  "PRP": "we"
                },
                "s_node_3_node_0_node": {
                  "VBP": "go"
                },
                "s_node_2_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node": {
                  "RB": "Brom"
                },
                "s_node_3_node_1_node": {
                  "RB": "now"
                },
                "s_node_4_node": {
                  "PERIOD": "."
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "now."
                ]
              }
            },
            "sentence": ",,Brom, we go now."
          },
          "jazzyState": {
            "text": ",,Brom, we go now.",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,Brom, we go now.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "This is Lalious.\u0027\u0027",
          "wordCount": 3,
          "orderParagraph": 2,
          "tense": [
            "Present"
          ],
          "nlpState": {
            "sentence": "This is Lalious.",
            "coreAnnotations": [
              {
                "pos": "DT",
                "text": "This",
                "net": "O"
              },
              {
                "pos": "VBZ",
                "text": "is",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Lalious",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Lalious-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "Lalious",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lalious"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(Lalious-3, This-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "this",
                  "ner": "O",
                  "tag": "DT",
                  "word": "This"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Lalious",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lalious"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(Lalious-3, is-2)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "2",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBZ",
                  "word": "is"
                },
                "gov": {
                  "index": "3",
                  "lemma": "Lalious",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lalious"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Lalious-3, .-4)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "4",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "Lalious",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Lalious"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "NNS": "Lalious"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "DT": "This"
                },
                "s_node_1_node_0_node": {
                  "VBZ": "is"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "Lalious.\u0027\u0027"
                ]
              }
            },
            "sentence": "This is Lalious.\u0027\u0027"
          },
          "jazzyState": {
            "text": "This is Lalious.\u0027\u0027",
            "misspelledWords": {
              "Lalious": [
                "lilies"
              ]
            }
          },
          "dialogState": {
            "sentence": "This is Lalious.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,The elf told them Brom was magic caster.\u0027\u0027",
      "wordCount": 8,
      "order": 25,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,The elf told them Brom was magic caster.\u0027\u0027",
          "wordCount": 8,
          "orderParagraph": 1,
          "tense": [
            "Past",
            "Past"
          ],
          "nlpState": {
            "sentence": "The elf told them Brom was magic caster.",
            "coreAnnotations": [
              {
                "pos": "DT",
                "text": "The",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "elf",
                "net": "O"
              },
              {
                "pos": "VBD",
                "text": "told",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "them",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": "VBD",
                "text": "was",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "magic",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "caster",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, told-3)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "3",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "told"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "det(elf-2, The-1)",
                  "name": "determiner",
                  "tag": "det"
                },
                "dep": {
                  "index": "1",
                  "lemma": "the",
                  "ner": "O",
                  "tag": "DT",
                  "word": "The"
                },
                "gov": {
                  "index": "2",
                  "lemma": "elf",
                  "ner": "O",
                  "tag": "NN",
                  "word": "elf"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(told-3, elf-2)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "2",
                  "lemma": "elf",
                  "ner": "O",
                  "tag": "NN",
                  "word": "elf"
                },
                "gov": {
                  "index": "3",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "told"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(told-3, them-4)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "4",
                  "lemma": "they",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "them"
                },
                "gov": {
                  "index": "3",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "told"
                }
              },
              {
                "reln": {
                  "parent": "comp",
                  "string": "ccomp(told-3, caster-8)",
                  "name": "clausal complement",
                  "tag": "ccomp"
                },
                "dep": {
                  "index": "8",
                  "lemma": "caster",
                  "ner": "O",
                  "tag": "NN",
                  "word": "caster"
                },
                "gov": {
                  "index": "3",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "told"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(told-3, .-9)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "9",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "3",
                  "lemma": "tell",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "told"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(caster-8, Brom-5)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "5",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "8",
                  "lemma": "caster",
                  "ner": "O",
                  "tag": "NN",
                  "word": "caster"
                }
              },
              {
                "reln": {
                  "parent": "aux",
                  "string": "cop(caster-8, was-6)",
                  "name": "copula",
                  "tag": "cop"
                },
                "dep": {
                  "index": "6",
                  "lemma": "be",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "was"
                },
                "gov": {
                  "index": "8",
                  "lemma": "caster",
                  "ner": "O",
                  "tag": "NN",
                  "word": "caster"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(caster-8, magic-7)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "7",
                  "lemma": "magic",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "magic"
                },
                "gov": {
                  "index": "8",
                  "lemma": "caster",
                  "ner": "O",
                  "tag": "NN",
                  "word": "caster"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node_0_node": {
                  "NNP": "Brom"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "PRP": "them"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "NN": "elf"
                },
                "s_node_1_node_2_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_2_node_1_node_0_node": {
                  "VBD": "was"
                },
                "s_node_1_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_2_node_1_node_1_node_1_node": {
                  "NN": "caster"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "S"
                },
                "s_node_1_node_2_node_1_node_1_node_0_node": {
                  "JJ": "magic"
                },
                "s_node_1_node_0_node": {
                  "VBD": "told"
                },
                "s_node_0_node_0_node": {
                  "DT": "The"
                },
                "s_node_1_node_2_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_2_node_1_node_1_leaf": {
                  "phrase": "NP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "caster.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,The elf told them Brom was magic caster.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,The elf told them Brom was magic caster.\u0027\u0027",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "sentence": ",,The elf told them Brom was magic caster.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind don\u0027t trust elf. Shot Brom. Brom dead didn\u0027t save Rind. Killed Brom...\u0027\u0027",
      "wordCount": 13,
      "order": 26,
      "sentenceCount": 4,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": false,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": ",,Rind don\u0027t trust elf.",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [
            "Present",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Rind don\u0027t trust elf.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBP",
                "text": "do",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "n\u0027t",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "trust",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "elf",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, trust-4)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(trust-4, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "aux(trust-4, do-2)",
                  "name": "auxiliary",
                  "tag": "aux"
                },
                "dep": {
                  "index": "2",
                  "lemma": "do",
                  "ner": "O",
                  "tag": "VBP",
                  "word": "do"
                },
                "gov": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                }
              },
              {
                "reln": {
                  "parent": "advmod",
                  "string": "neg(trust-4, n\u0027t-3)",
                  "name": "negation modifier",
                  "tag": "neg"
                },
                "dep": {
                  "index": "3",
                  "lemma": "not",
                  "ner": "O",
                  "tag": "RB",
                  "word": "n\u0027t"
                },
                "gov": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(trust-4, elf-5)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "5",
                  "lemma": "elf",
                  "ner": "O",
                  "tag": "NN",
                  "word": "elf"
                },
                "gov": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(trust-4, .-6)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "6",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "4",
                  "lemma": "trust",
                  "ner": "O",
                  "tag": "VB",
                  "word": "trust"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node_0_node": {
                  "VB": "trust"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_2_node_1_node": {
                  "NN": "elf"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node": {
                  "RB": "n\u0027t"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_1_node_2_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_0_node": {
                  "VBP": "do"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "elf."
                ]
              }
            },
            "sentence": ",,Rind don\u0027t trust elf."
          },
          "jazzyState": {
            "text": ",,Rind don\u0027t trust elf.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind don\u0027t trust elf.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Shot Brom.",
          "wordCount": 2,
          "orderParagraph": 2,
          "tense": [],
          "nlpState": {
            "sentence": "Shot Brom.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Shot",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Brom-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(Brom-2, Shot-1)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Shot",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Shot"
                },
                "gov": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Brom-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "NNP": "Brom"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Shot"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Brom."
                ]
              }
            },
            "sentence": "Shot Brom."
          },
          "jazzyState": {
            "text": "Shot Brom.",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Brom dead didn\u0027t save Rind.",
          "wordCount": 5,
          "orderParagraph": 3,
          "tense": [
            "Past",
            "Past",
            "PastParticiple",
            "Present",
            "Present",
            "PresentParticiple"
          ],
          "nlpState": {
            "sentence": "Brom dead didn\u0027t save Rind.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "dead",
                "net": "O"
              },
              {
                "pos": "VBD",
                "text": "did",
                "net": "O"
              },
              {
                "pos": "RB",
                "text": "n\u0027t",
                "net": "O"
              },
              {
                "pos": "VB",
                "text": "save",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, save-5)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(Brom-1, dead-2)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "2",
                  "lemma": "dead",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "dead"
                },
                "gov": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(save-5, Brom-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "aux(save-5, did-3)",
                  "name": "auxiliary",
                  "tag": "aux"
                },
                "dep": {
                  "index": "3",
                  "lemma": "do",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "did"
                },
                "gov": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                }
              },
              {
                "reln": {
                  "parent": "advmod",
                  "string": "neg(save-5, n\u0027t-4)",
                  "name": "negation modifier",
                  "tag": "neg"
                },
                "dep": {
                  "index": "4",
                  "lemma": "not",
                  "ner": "O",
                  "tag": "RB",
                  "word": "n\u0027t"
                },
                "gov": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                }
              },
              {
                "reln": {
                  "parent": "obj",
                  "string": "dobj(save-5, Rind-6)",
                  "name": "direct object",
                  "tag": "dobj"
                },
                "dep": {
                  "index": "6",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(save-5, .-7)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "7",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "5",
                  "lemma": "save",
                  "ner": "O",
                  "tag": "VB",
                  "word": "save"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node_2_node_0_node": {
                  "VB": "save"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_2_node_1_node": {
                  "NNP": "Rind"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_1_node": {
                  "RB": "n\u0027t"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "NN": "dead"
                },
                "s_node_1_node_2_node_1_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_0_node": {
                  "VBD": "did"
                },
                "s_node_0_node_0_node": {
                  "JJ": "Brom"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "Rind."
                ]
              }
            },
            "sentence": "Brom dead didn\u0027t save Rind."
          },
          "jazzyState": {
            "text": "Brom dead didn\u0027t save Rind.",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 4,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Killed Brom...\u0027\u0027",
          "wordCount": 2,
          "orderParagraph": 4,
          "tense": [
            "PastParticiple"
          ],
          "nlpState": {
            "sentence": "Killed Brom...",
            "coreAnnotations": [
              {
                "pos": "VBN",
                "text": "Killed",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Brom",
                "net": "O"
              },
              {
                "pos": ":",
                "text": "...",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, Brom-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "case(Brom-2, Killed-1)",
                  "name": "case marker",
                  "tag": "case"
                },
                "dep": {
                  "index": "1",
                  "lemma": "kill",
                  "ner": "O",
                  "tag": "VBN",
                  "word": "Killed"
                },
                "gov": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(Brom-2, ...-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": "...",
                  "ner": "O",
                  "tag": ":",
                  "word": "..."
                },
                "gov": {
                  "index": "2",
                  "lemma": "Brom",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Brom"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "NNP": "Brom"
                },
                "s_node_2_node": {
                  "COLON": "..."
                },
                "s_node_0_node": {
                  "NNP": "Killed"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "Brom...\u0027\u0027"
                ]
              }
            },
            "sentence": "Killed Brom...\u0027\u0027"
          },
          "jazzyState": {
            "text": "Killed Brom...\u0027\u0027",
            "misspelledWords": {
              "Brom": [
                "broom",
                "brim",
                "from",
                "brow",
                "boom",
                "ROM"
              ]
            }
          },
          "dialogState": {
            "sentence": "Killed Brom...\u0027\u0027",
            "originOfDialogFromOrderParagraph": 4,
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Rind cut. Rind hooded.\u0027\u0027",
      "wordCount": 4,
      "order": 27,
      "sentenceCount": 2,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": ",,Rind cut.",
          "wordCount": 2,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Rind cut.",
            "coreAnnotations": [
              {
                "pos": "JJ",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "cut",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, cut-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "amod(cut-2, Rind-1)",
                  "name": "adjectival modifier",
                  "tag": "amod"
                },
                "dep": {
                  "index": "1",
                  "lemma": "rind",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "VBD": "cut"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "PERIOD": [
                  "cut."
                ]
              }
            },
            "sentence": ",,Rind cut."
          },
          "jazzyState": {
            "text": ",,Rind cut.",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Rind cut.",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": "Rind hooded.\u0027\u0027",
          "wordCount": 2,
          "orderParagraph": 2,
          "tense": [
            "Past"
          ],
          "nlpState": {
            "sentence": "Rind hooded.",
            "coreAnnotations": [
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": "VBD",
                "text": "hooded",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, hooded-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "hood",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "hooded"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "subj",
                  "string": "nsubj(hooded-2, Rind-1)",
                  "name": "nominal subject",
                  "tag": "nsubj"
                },
                "dep": {
                  "index": "1",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "hood",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "hooded"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(hooded-2, .-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "hood",
                  "ner": "O",
                  "tag": "VBD",
                  "word": "hooded"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_1_node": {
                  "VBD": "hooded"
                },
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node": {
                  "NNP": "Rind"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "hooded.\u0027\u0027"
                ]
              }
            },
            "sentence": "Rind hooded.\u0027\u0027"
          },
          "jazzyState": {
            "text": "Rind hooded.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": "Rind hooded.\u0027\u0027",
            "dialogMark": [
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": false,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    },
    {
      "paragraph": ",,Mom cut, hooded, Rind...me.\u0027\u0027",
      "wordCount": 4,
      "order": 28,
      "sentenceCount": 1,
      "dialog": true,
      "sentenceStates": [
        {
          "sentence": "DIALOG_OBJECT_1",
          "wordCount": 0,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "DIALOG_OBJECT_1",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "DIALOG_OBJECT_1",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, DIALOG_OBJECT_1-1)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "1",
                  "lemma": "dialog_object_1",
                  "ner": "O",
                  "tag": "NN",
                  "word": "DIALOG_OBJECT_1"
                },
                "gov": {
                  "index": "0"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node": {
                  "NNP": "DIALOG_OBJECT_1"
                }
              }
            }
          },
          "punctuationState": {
            "sentence": "DIALOG_OBJECT_1"
          },
          "jazzyState": {
            "text": "DIALOG_OBJECT_1",
            "misspelledWords": {}
          },
          "dialogState": {
            "dialog": false,
            "dialogBegin": false,
            "dialogEnd": false,
            "dialogContinue": false
          },
          "completeSentence": false
        },
        {
          "sentence": ",,Mom cut, hooded, Rind...me.\u0027\u0027",
          "wordCount": 4,
          "orderParagraph": 1,
          "tense": [],
          "nlpState": {
            "sentence": "Mom cut, hooded, Rind...me.",
            "coreAnnotations": [
              {
                "pos": "NN",
                "text": "Mom",
                "net": "O"
              },
              {
                "pos": "NN",
                "text": "cut",
                "net": "O"
              },
              {
                "pos": ",",
                "text": ",",
                "net": "O"
              },
              {
                "pos": "JJ",
                "text": "hooded",
                "net": "O"
              },
              {
                "pos": ",",
                "text": ",",
                "net": "O"
              },
              {
                "pos": "NNP",
                "text": "Rind",
                "net": "O"
              },
              {
                "pos": ":",
                "text": "...",
                "net": "O"
              },
              {
                "pos": "PRP",
                "text": "me",
                "net": "O"
              },
              {
                "pos": ".",
                "text": ".",
                "net": "O"
              }
            ],
            "typedDependency": [
              {
                "reln": {
                  "string": "root(ROOT-0, cut-2)",
                  "name": "root",
                  "tag": "root"
                },
                "dep": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                },
                "gov": {
                  "index": "0"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "compound(cut-2, Mom-1)",
                  "name": "compound modifier",
                  "tag": "compound"
                },
                "dep": {
                  "index": "1",
                  "lemma": "mom",
                  "ner": "O",
                  "tag": "NN",
                  "word": "Mom"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, ,-3)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "3",
                  "lemma": ",",
                  "ner": "O",
                  "tag": ",",
                  "word": ","
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "appos(cut-2, hooded-4)",
                  "name": "appositional modifier",
                  "tag": "appos"
                },
                "dep": {
                  "index": "4",
                  "lemma": "hooded",
                  "ner": "O",
                  "tag": "JJ",
                  "word": "hooded"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, ,-5)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "5",
                  "lemma": ",",
                  "ner": "O",
                  "tag": ",",
                  "word": ","
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "mod",
                  "string": "appos(cut-2, Rind-6)",
                  "name": "appositional modifier",
                  "tag": "appos"
                },
                "dep": {
                  "index": "6",
                  "lemma": "Rind",
                  "ner": "O",
                  "tag": "NNP",
                  "word": "Rind"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, ...-7)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "7",
                  "lemma": "...",
                  "ner": "O",
                  "tag": ":",
                  "word": "..."
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "string": "dep(cut-2, me-8)",
                  "name": "dependent",
                  "tag": "dep"
                },
                "dep": {
                  "index": "8",
                  "lemma": "I",
                  "ner": "O",
                  "tag": "PRP",
                  "word": "me"
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              },
              {
                "reln": {
                  "parent": "dep",
                  "string": "punct(cut-2, .-9)",
                  "name": "punctuation",
                  "tag": "punct"
                },
                "dep": {
                  "index": "9",
                  "lemma": ".",
                  "ner": "O",
                  "tag": ".",
                  "word": "."
                },
                "gov": {
                  "index": "2",
                  "lemma": "cut",
                  "ner": "O",
                  "tag": "NN",
                  "word": "cut"
                }
              }
            ],
            "pennTreebankState": {
              "treeBranchesMap": {
                "s_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_3_node": {
                  "COMMA": ","
                },
                "s_node_0_node_0_leaf": {
                  "phrase": "NP"
                },
                "s_node_1_node_1_node": {
                  "COLON": "..."
                },
                "s_node_2_node": {
                  "PERIOD": "."
                },
                "s_node_0_node_1_node": {
                  "COMMA": ","
                },
                "s_node_0_node_0_node_1_node": {
                  "NN": "cut"
                },
                "s_node_1_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_2_node": {
                  "PRP": "me"
                },
                "s_node_0_node_2_leaf": {
                  "phrase": "VP"
                },
                "s_node_1_node_2_leaf": {
                  "phrase": "NP"
                },
                "s_node_0_node_2_node": {
                  "VBN": "hooded"
                },
                "s_node_0_node_0_node_0_node": {
                  "NN": "Mom"
                },
                "s_node_1_node_0_node": {
                  "VBP": "Rind"
                }
              }
            }
          },
          "punctuationState": {
            "periodState": {
              "periodStates": {
                "INITIAL": "([A-Z]\\.)+[\\.]{0,1}",
                "ELLIPSIS": "([A-Za-z]*\\.\\.\\.[A-Za-z]*)+[\\\\.|\\\\!|\\\\?]{0,1}",
                "MARK": ".",
                "PERIOD": "[a-zA-Z0-9]+\\.$"
              },
              "patterns": {
                "ANTI": [
                  "Rind...me.\u0027\u0027"
                ]
              }
            },
            "sentence": ",,Mom cut, hooded, Rind...me.\u0027\u0027"
          },
          "jazzyState": {
            "text": ",,Mom cut, hooded, Rind...me.\u0027\u0027",
            "misspelledWords": {}
          },
          "dialogState": {
            "sentence": ",,Mom cut, hooded, Rind...me.\u0027\u0027",
            "originOfDialogFromOrderParagraph": 1,
            "dialogMark": [
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
              "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
              "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)"
            ],
            "dialogNplToken": "\u0027\u0027",
            "telepathicBeginRegex": "(\u003e[A-Za-z].*)|(\u003e\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e[A-Za-z].*)",
            "telepathicContinueRegex": "(\u003e\\|[A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*)",
            "telepathicEndRegex": "(\u003e\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|\\.+[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e\\|[A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*,\u003c [A-Za-z].*)|([A-Za-z].*,\u003c [A-Za-z].*)|(\u003e[A-Za-z].*\u003c)|(\u003e\\.+[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e[A-Za-z].*\u003c)|(\u003e\\|[A-Za-z].*\u003c)|(\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|[A-Za-z].*\u003c)|([A-Za-z].*\\s\u003e\\|\\.+[A-Za-z].*\u003c)|([A-Za-z].*\u003c)",
            "internalBeginRegex": "(\u003c[A-Za-z].*)|(\u003c\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c[A-Za-z].*)",
            "internalContinueRegex": "(\u003c\\|[A-Za-z].*)|(\u003c\\|\\.+[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*)",
            "internalEndRegex": "(\u003c\\|\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\.*[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c\\|[A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*,\u003e [A-Za-z].*)|([A-Za-z].*,\u003e [A-Za-z].*)|(\u003c[A-Za-z].*\u003e)|(\u003c\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c[A-Za-z].*\u003e)|(\u003c\\|[A-Za-z].*\u003e)|(\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|[A-Za-z].*\u003e)|([A-Za-z].*\\s\u003c\\|\\.+[A-Za-z].*\u003e)|([A-Za-z].*\u003e)",
            "audioBeginRegex": "(,,[A-Za-z].*)|(,,\\.+[A-Za-z].*)|([A-Za-z].*\\s,,[A-Za-z].*)",
            "audioContinueRegex": "(\u0027\u0027[A-Za-z].*)|(\u0027\u0027\\.+[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*)|([A-Za-z].*\\s\u0027\u0027\\.+[A-Za-z].*)",
            "audioEndRegex": "(,,[A-Za-z].*\u0027\u0027)|(,,\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s,,[A-Za-z].*\u0027\u0027)|(\u0027\u0027[A-Za-z].*\u0027\u0027)|(\u0027\u0027\\.+[A-Za-z].*\u0027\u0027)|([A-Za-z].*\\s\u0027\u0027[A-Za-z].*\u0027\u0027)|([A-Za-z].*,\u0027\u0027 [A-Za-z].*)|([A-Za-z].*\u0027\u0027)",
            "telepathicBeginUnicode": "u003E",
            "telepathicContinueUnicode": "u003Eu007C",
            "telepathicEndUnicode": "u003C",
            "internalBeginUnicode": "u003C",
            "internalContinueUnicode": "u003Cu007C",
            "internalEndUnicode": "u003E",
            "audioBeginUnicode": "u002Cu002C",
            "audioContinueUnicode": "u0027u0027",
            "audioEndUnicode": "u0027u0027",
            "telepathicBeginMark": "\u003e",
            "telepathicContinueMark": "\u003e|",
            "telepathicEndMark": "\u003c",
            "internalBeginMark": "\u003c",
            "internalContinueMark": "\u003c|",
            "internalEndMark": "\u003e",
            "audioBeginMark": ",,",
            "audioContinueMark": "\u0027\u0027",
            "audioEndMark": "\u0027\u0027",
            "dialog": true,
            "dialogBegin": true,
            "dialogEnd": true,
            "dialogContinue": false
          },
          "completeSentence": false
        }
      ]
    }
  ]
}



